diff --git a/node_modules/semantic-release-plugin-decorators/src/wrapStep.js b/node_modules/semantic-release-plugin-decorators/src/wrapStep.js
index 2594560..dc7d214 100644
--- a/node_modules/semantic-release-plugin-decorators/src/wrapStep.js
+++ b/node_modules/semantic-release-plugin-decorators/src/wrapStep.js
@@ -18,48 +18,47 @@
  * debug output (will display as "anonymous" by default).
  */
 const wrapStep = (
-  stepName,
-  wrapFn,
-  { defaultReturn = undefined, wrapperName = '' } = {}
+	stepName,
+	wrapFn,
+	{ defaultReturn = undefined, wrapperName = '' } = {}
 ) => {
-  return Array(10)
-    .fill(null)
-    .map((value, index) => {
-      const wrapperFn = async function(_, context) {
-        const {
-          options: { plugins },
-        } = context;
-        const pluginDefinition = plugins[index];
-        const [pluginName, pluginConfig] = Array.isArray(pluginDefinition)
-          ? pluginDefinition
-          : [pluginDefinition, {}];
+	return Array(10)
+		.fill(null)
+		.map((value, index) => {
+			const wrapperFn = async function (_, context) {
+				const {
+					options: { plugins },
+				} = context;
+				const pluginDefinition = plugins[index];
+				const [pluginName, pluginConfig] = Array.isArray(pluginDefinition)
+					? pluginDefinition
+					: [pluginDefinition, {}];
 
-        if (!pluginName) {
-          return defaultReturn;
-        } else if (typeof pluginName !== 'string') {
-          throw new Error(
-            `${
-              wrapperName ? wrapperName : 'semantic-release-plugin-decorators'
-            }: Incorrect plugin name type. Expected string but was ${JSON.stringify(
-              pluginName
-            )}.`
-          );
-        }
+				if (!pluginName) {
+					return defaultReturn;
+				} else if (typeof pluginName !== 'string') {
+					throw new Error(
+						`${wrapperName ? wrapperName : 'semantic-release-plugin-decorators'
+						}: Incorrect plugin name type. Expected string but was ${JSON.stringify(
+							pluginName
+						)}.`
+					);
+				}
 
-        const plugin = require(pluginName);
-        const step = plugin && plugin[stepName];
+				const plugin = await import(pluginName);
+				const step = plugin && plugin[stepName];
 
-        if (!step) {
-          return defaultReturn;
-        }
+				if (!step) {
+					return defaultReturn;
+				}
 
-        return wrapFn(step)(pluginConfig, context);
-      };
+				return wrapFn(step)(pluginConfig, context);
+			};
 
-      Object.defineProperty(wrapperFn, 'name', { value: wrapperName });
+			Object.defineProperty(wrapperFn, 'name', { value: wrapperName });
 
-      return wrapperFn;
-    });
+			return wrapperFn;
+		});
 };
 
 module.exports = wrapStep;
